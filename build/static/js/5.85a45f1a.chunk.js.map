{"version":3,"sources":["components/AppComponents/CasesInfo/Charts/Rates/Rates.js","components/AppComponents/CasesInfo/Charts/Charts.js"],"names":["Rates","type","rate","bgCol","className","style","backgroundColor","React","forwardRef","props","ref","useContext","DataContext","history","trackColor","trackNum","country","link","useAxFetch","GlobeV3URL","resp","active","cases","deaths","recovered","useWindowResize","width","perCal","toFixed","Colors","Percentage","Active","Recovery","Death","perData","Object","entries","key","value","push","data","series","name","options","chart","height","zoom","enabled","toolbar","show","markers","size","colors","strokeColors","strokeWidth","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","custom","fillSeriesColor","theme","fontSize","fontFamily","onDatasetHover","highlightDataSeries","x","y","formatter","title","seriesName","z","marker","items","display","fixed","position","offsetX","offsetY","color","dataLabels","stroke","curve","xaxis","axisBorder","axisTicks","labels","yaxis","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","colorStops","grid","strokeDashArray","borderColor","padding","top","left","right","lines","map","id","Date","getDate","getMonth","target","rel","href"],"mappings":"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","file":"static/js/5.85a45f1a.chunk.js","sourcesContent":["import React from 'react'\nimport './Rates.scss'\nconst Rates = ({type,rate,bgCol}) => {\n    return (\n        <h4 className=\"Rates\">\n            <span style={{backgroundColor : bgCol}}/>\n            <span>\n                {type}\n            </span>\n            <span >\n                {rate}%\n            </span>\n        </h4>\n    )\n}\n\nexport default Rates\n","import React from 'react'\nimport ReactApexChart from 'react-apexcharts'\nimport { useWindowResize,useAxFetch } from '../../../commonUI/customHooks/customHooks'\nimport Button from '../../../commonUI/Ui/Button/Button.component'\nimport { Github } from '../../../commonUI/Ui/UI'\nimport { DataContext } from '../../../Context/NewDataContext'\nimport { GlobeV3URL } from '../../../../axios.js'\nimport './Charts.scss'\nimport Rates from './Rates/Rates'\nconst Charts = (props,ref) => {\n    const Months = ['Jan', 'Feb','March', 'April','May', 'June','July', 'Aug','Sept', 'Oct','Nov', 'Dec']\n    const { history,trackColor,trackNum,country,link } = React.useContext(DataContext)\n    const { resp : {\n      active,\n      cases,\n      deaths,\n      recovered\n    } } = useAxFetch(GlobeV3URL,link)\n    const [ width ] = useWindowResize()\n    const perCal = type => ((type/cases)*100).toFixed( width < 380 ? 1 : 2)\n    const Colors = ['rgb(246, 200, 121)','rgb(92, 193, 172)','rgb(79, 78, 83)']\n    const Percentage = {\n      Active : perCal(active),\n      Recovery : perCal(recovered),\n      Death : perCal(deaths)\n    }\n    const perData = []\n    for(let [key,value] of Object.entries(Percentage)){\n      perData.push({\n        type : key,\n        rate : value\n      })\n    }\n    const data= {\n        series :[{\n            name: trackNum === 0 ? \"Active\" : trackNum === 1 ? \"Recovered\" : \"Deaths\" ,\n            data: history[trackNum]\n        }],\n        options: {\n            chart: {\n              height: '100%',\n              type: 'line',\n              zoom: {\n                enabled: false\n              },\n              toolbar:{show:false},\n            },\n            markers: {\n              size : 5,\n              colors: '#fff',\n              strokeColors: trackNum === 0 ? \"#f6c879\" : trackNum === 1 ? \"#5cc1ac\" : \"#4f4e53\",\n              strokeWidth: 2,\n            },\n            tooltip: {\n              enabled: true,\n              enabledOnSeries: undefined,\n              shared: true,\n              followCursor: false,\n              intersect: false,\n              inverseOrder: false,\n              custom: undefined,\n              fillSeriesColor: false,\n              theme: \"dark\",\n              style: {\n                fontSize: '12px',\n                fontFamily: 'Poppins'\n              },\n              onDatasetHover: {\n                  highlightDataSeries: false,\n              },\n              x: { show: false },\n              y: {\n                  formatter: undefined,\n                  title: {\n                      formatter: seriesName => seriesName,\n                  },\n              },\n              z: {\n                  formatter: undefined,\n                  title: 'Size: '\n              },\n              marker: {\n                  show: true,\n              },\n              items: {\n                 display: \"flex\",\n              },\n              fixed: {\n                  enabled: false,\n                  position: 'topRight',\n                  offsetX: 0,\n                  offsetY: 0,\n              },\n            },\n            color: trackColor,\n            dataLabels: {\n              enabled: false\n            },\n            stroke: {\n              curve: 'smooth',\n              colors:[trackColor]\n            },\n            xaxis: { axisBorder:{ show : false },axisTicks:{show:false},labels:{show :true} },\n            yaxis : {\n                labels: {\n                    offsetX: -30,\n                    offsetY: 0\n                },\n            },\n            fill: {\n                colors: \"#f6c879\",\n                gradient: {\n                    shade: 'light',\n                    type: \"vertical\",\n                    shadeIntensity: 1,\n                    gradientToColors: undefined,\n                    inverseColors: true,\n                    opacityFrom: 0.8,\n                    opacityTo: 0,\n                    colorStops: []\n                }\n              },              \n            grid: {\n                strokeDashArray : 5,\n                borderColor: '#65676A',\n                padding : {top: 0,left: -20,right: -20},\n                xaxis :{lines: {show: true}},\n                yaxis :{lines: {show: false}},\n            },\n        }\n    }\n    return (\n        <div className=\"charts\" ref={ref}>\n              <h3>\n                <span>Monthly Spike Analysis :&nbsp;</span>\n                <span>&nbsp;{country}</span>\n              </h3>\n              <div className=\"charts-rate\">\n               {\n                 perData && perData.map((items,id) => {\n                   return {\n                     ...items,\n                     bgCol : Colors[id]\n                   }\n                 }).map(type => {\n                   return <Rates\n                   key={type.type} \n                   {...type}/>\n                 })\n               }\n              </div>\n              <ReactApexChart\n              width=\"100%\"\n              options={data.options} \n              series={data.series} \n              type=\"area\" \n              height={350} />\n              <h1 className=\"charts-updated\">\n                  <span className=\"charts-updated--1\">Updated</span>{\" \"}\n                  <span className=\"charts-updated--2\">{new Date().getDate()}{\" \"}{Months[new Date().getMonth()]}</span>\n              </h1>\n              <a\n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/Sayantanvisca\" \n              className=\"charts-btn\">\n                <Button>\n                    <span><Github /></span>\n                    <span>Github</span>\n                </Button>\n              </a>\n        </div>\n    )\n}\n\nexport default React.forwardRef(Charts)\n"],"sourceRoot":""}