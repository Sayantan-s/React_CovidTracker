{"version":3,"sources":["components/AppComponents/CasesInfo/Table/TableRow/Tablerow.component.jsx","components/AppComponents/CasesInfo/Table/Table.component.jsx"],"names":["Tablerow","img","number","newnumber","country","click","div","variants","start","x","opacity","end","className","onClick","src","alt","width","height","Table","Click","React","useState","search","setSearch","useWindowResize","active","recov","death","dataType","setType","useContext","DataContext","Data","setCos","setZoom","setCountry","setColor","setNum","setCn","setID","setLink","InstantData","filter","toLowerCase","includes","SECONDBREAK_POINT","type","value","placeholder","onChange","event","target","name","map","btn","style","background","boxShadow","key","_","transition","staggerChildren","initial","animate","id","lat","long","cn","HELPINGBRK","TENTHBREAK_POINT","EIGHTHBREAK_POINT","onCountryChange","iso","recovered","deaths","newCases","newRecovered","newDeaths","flag"],"mappings":"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","file":"static/js/6.2c8c9c15.chunk.js","sourcesContent":["import React from 'react'\nimport './Tablerow.scss'\nimport { motion } from 'framer-motion'\nconst Tablerow = ({img,number,newnumber,country,click}) => {\n    const Animation = {\n        start : {\n            x : 1000,\n            opacity : 0\n        },\n        end : {\n            x : 0,\n            opacity : 1,\n        },\n    }\n    return (\n        <motion.div \n        variants = {Animation}\n        className=\"table-row\" onClick={click}>\n            <div className=\"table-row--left\">\n                <div className=\"table-row--left_flag\">\n                    <img src={img} alt={country} width=\"40\" height=\"40\" />\n                </div>\n                <h2>{country}</h2>\n                <h3>+{newnumber}</h3>\n            </div>\n            <div className=\"table-row--right\">\n                <h4>{number}</h4>\n            </div>\n        </motion.div>\n    )\n}\n\nexport default Tablerow\n","import React from 'react'\nimport { useWindowResize } from '../../../commonUI/customHooks/customHooks'\nimport Button from '../../../commonUI/Ui/Button/Button.component'\nimport { DataContext } from '../../../Context/NewDataContext'\nimport './Table.scss'\nimport Tablerow from './TableRow/Tablerow.component'\nimport { SECONDBREAK_POINT,HELPINGBRK,EIGHTHBREAK_POINT,TENTHBREAK_POINT } from '../../../commonUI/Ui/breakpoints'\nimport { motion } from 'framer-motion'\nconst Table = ({Click}) => {\n    const[search,setSearch] = React.useState('');\n    const [width] = useWindowResize()\n    const[dataType,setType] = React.useState({\n        active : true,\n        recov : false,\n        death : false\n    })\n    const { Data,setCos,setZoom,setCountry,setColor,setNum,setCn,setID,setLink } = React.useContext(DataContext)\n    const Buttons = [\n        {\n            name : 'Active'\n        },\n        {\n            name : 'Recovered'\n        },\n        {\n            name : 'Deaths'\n        }\n\n    ]\n    const InstantData = Data.filter(country => {\n        return country.country.toLowerCase().includes(search.toLowerCase())\n    })\n    const onCountryChange = (lat,long,country,cn,id) => {\n       setCos(lat,long)\n       setZoom(width < HELPINGBRK ? 4 : width > TENTHBREAK_POINT && width < EIGHTHBREAK_POINT ? 4.5 : 6)\n       setCountry(country)\n       setCn(cn)\n       setID(id)\n       setLink(country)\n       Click()\n    }\n    const ActiveHandler = () => {\n        setType({\n            active : true,\n            recov : false,\n            death: false\n        })\n        setColor('#f6c879')\n        setNum(0)\n    }\n    const RecovHandler = () => {\n        setType({\n            active : false,\n            recov:true,\n            death: false\n        })\n        setColor('#5cc1ac')\n        setNum(1)\n    }\n    const DeathHandler = () => {\n        setType({\n            active : false,\n            recov:false,\n            death: true\n        })\n        setColor('#4f4e53')\n        setNum(2)\n    }\n    const AnimationVariants = {\n        start: {\n          opacity: 0\n        },\n        end: {\n            opacity : 1,\n            transition: {\n                staggerChildren: 0.1,\n            },\n          },\n    }\n    return (\n          <div className=\"table\">\n            {width <= SECONDBREAK_POINT ? <h1>\n                Cases Info\n            </h1> : null}\n            <div className=\"table-search\">\n                <input\n                type=\"search\"\n                value={search}\n                placeholder=\"Search\"\n                onChange={(event) => {setSearch(event.target.value)}}\n                />\n            </div>\n            <div className=\"table-buttons\">\n                {\n                    Buttons.map(btn => {\n                        return <Button \n                        style={{background:  dataType.active && btn.name === \"Active\"? '#f6c879'\n                        : dataType.recov && btn.name === \"Recovered\" ? '#5cc1ac' \n                        : dataType.death && btn.name === \"Deaths\" ? \"#4f4e53\"\n                        : \"linear-gradient(185deg, #2b2e31, #242729)\",\n                        boxShadow : dataType.active && btn.name === \"Active\"? `0px 5px 20px rgba(246, 200, 121,0.3)`\n                        : dataType.recov && btn.name === \"Recovered\" ? `0px 5px 20px rgba(92, 193, 172,0.3)` \n                        : dataType.death && btn.name === \"Deaths\" ? `0px 5px 20px rgba(79, 78, 83,0.3)` : \"0px 5px 15px rgba(0,0,0,0.1)\"}}\n                        key={btn.name}\n                        onClick={ _ => {\n                            btn.name === 'Active' ? ActiveHandler()\n                            :btn.name === 'Recovered' ? RecovHandler()\n                            :DeathHandler()\n                        }}\n                        className={'button'}\n                        >{btn.name}</Button>\n                    })\n                }\n            </div>\n            <>\n            {\n                Data &&   <motion.div \n                variants={AnimationVariants}\n                initial=\"start\"\n                animate=\"end\"\n                className=\"table-data\">\n                    {\n                        InstantData.map((country,id) => {\n                            return <Tablerow\n                            click={_ => onCountryChange(country.lat,country.long,country.iso,country.country,id)}\n                            key={country.country}\n                            country={country.country}\n                            number={\n                                dataType.active ? country.active \n                                : dataType.recov ? country.recovered \n                                : country.deaths}\n                            newnumber={\n                                dataType.active ? country.newCases\n                                : dataType.recov ? country.newRecovered\n                                : country.newDeaths}\n                            img={country.flag}\n                            />\n                        })\n                    }\n                </motion.div>\n            }\n            </>\n          </div>\n    )\n}\n\nexport default Table\n"],"sourceRoot":""}